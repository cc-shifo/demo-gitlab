# 将本地创建分支，并切换到新建的分支
# git checkout -b rlease/test-v1.0.0
git checkout -b rlease/test-v1.0.0
# 将本地当前分支推送到远程分支
# git push origin local-branch:new-branch-name
# git push origin new-branch-name
# 提交本地代码与到远程分支 git push -u oirigin rlease/test-v1.0.0
git push origin rlease/test-v1.0.0:rlease/test-v1.0.0
# 第一次提交tag
git tag -a v1.0.0-test.1 -m "test branch分支模拟alpha,beta,rc1阶段"
git push origin v1.0.0-test.1
# 如果此时，切换到master分支git checkout main，查看master上是否有这个tag，结果是不会看到这个tag的git tag --merged main


# 模拟修改bug
git add 000-test-branch.txt
git commit -m "rlease/test-v1.0.0 branch fix bug"
git push origin rlease/test-v1.0.0

# 提交tag
git tag -a v1.0.0-test.2 -m "test branch分支模拟alpha,beta,rc2阶段"
# 推送tag到远程分支
git push origin v1.0.0-test.2



# 将000-test-branch.txt改成002-test-branch.txt模拟修改bug
git add 002-test-branch.txt
git commit -m "rlease/test-v1.0.0 branch fix bug 202508191718"
git push origin rlease/test-v1.0.0

# 提交tag
git tag -a v1.0.0-test.3 -m "test branch分支模拟alpha,beta,rc3阶段"
# 推送tag到远程分支
git push origin v1.0.0-test.3


# 添加003-release-branch.txt信息，来记录下发布过程。
git 003-release-branch.txt
git commit -m "在rlease/test-v1.0.0分支下添加信息，记录下发布过程"
git push origin rlease/test-v1.0.0
# 提交tag
git tag -a v1.0.0-test.4 -m "此v1.0.0-test.4标记用途：在rlease/test-v1.0.0分支下添加信息，记录下发布过程，记录release阶段的操作步骤"
# 推送tag到远程分支
git push origin v1.0.0-test.4


# 为了简便，没有创建dev分支，假设rc代码已同步进dev分支了。
# 同步dev分支代码。将rlease/test-v1.0.0分支代码同步进dev分支。假设dev已同步。
# 切换到dev分支。
# git checkout dev
# git merge --no-ff release/test-v1.0.0
# git push origin dev


# 同步master分支代码。将rlease/test-v1.0.0分支代码同步进master分支
# 切换到master分支。
git checkout master
git merge --no-ff release/test-v1.0.0
git push origin master
git tag -a release-v1.0.0 -m "v1.0.0发布阶段, 记录正式的发布标签release-v1.0.0"
git push origin release-v1.0.0

